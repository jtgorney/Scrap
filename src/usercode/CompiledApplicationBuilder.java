package usercode;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;

/**
 * Abstract class for building Applications which run executable binaries
 * compiled from source code.
 *
 * @author Matthew Mossner
 */
public abstract class CompiledApplicationBuilder extends ApplicationBuilder {

   File[] compilerOutput;

   /**
    * Compiles the provided source code file.
    *
    * @param code A source code file written in the appropriate language
    * @return An array of three Files, with the first element containing the
    * compiled code file, or null if any compiler errors occurred, and the
    * remaining two elements containing any standard output and standard error
    * generated by the compiler.
    */
   protected abstract File[] compile(File code) throws InterruptedException,
                                                       IOException;

   /**
    * @return The most recent compiled code file generated by a call to the
    * getApplication method, or null if no such file has been generated
    */
   final File getCompiledCode() {
      return compilerOutput[0];
   }

   /**
    * @return An array of two Files, with the first element containing any
    * standard output generated by the compiler the last time it was run, and
    * the second element containing any standard error generated.  Returns null
    * if the compiler has not yet been successfully run.
    */
   final File[] getCompilerOutput() {
      return Arrays.copyOfRange(compilerOutput, 1, 3);
   }

   /**
    * @param code A source code file written in the appropriate language
    * @return An Application derived from the provided source code file, or null
    * if the file could not be compiled
    * @throws java.io.IOException If an I/O exception of some sort occurs during
    * compilation
    */
   Application getApplication(File code) throws InterruptedException,
                                                IOException {
      compilerOutput = compile(code);
      if (compilerOutput[0] != null)
         return new Application(compilerOutput[0]);
      return null;
   }
}
