/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Jacob Gorney, Max Savard, Matt Mossner, Spencer Kokaly
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package compiler;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;

/**
 * @author Matthew Mossner
 */
class CPPApplicationBuilder extends CompiledApplicationBuilder {

   private static final int COMPILER_TIMEOUT = 0;

   private static CPPApplicationBuilder instance;

   private File workingDirectory;

   private CPPApplicationBuilder() {}

   /**
    * Compiles the provided C++ source code file.
    *
    * @param code A C++ source code file
    * @return An array of three Files, with the first element containing the
    * compiled executable file, or null if any compiler errors occurred, and the
    * remaining two elements containing any standard output and standard error
    * generated by the compiler.
    */
   @Override
   protected File[] compile(File code) throws InterruptedException, IOException {
      File[] result = new File[3];
      Application compiler = new Application(new File("/usr/bin/g++"));
      if (workingDirectory == null) {
         workingDirectory = Files.createTempDirectory("Cpp").toFile();
         workingDirectory.deleteOnExit();
      }
      String executableName = FileUtils.removeFileExtension(code);
      File[] compilerOutput = compiler.run(workingDirectory, null,
                                           COMPILER_TIMEOUT,
                                           code.getAbsolutePath(),
                                           "-o", executableName);
      result[0] = FileUtils.getFile(workingDirectory, executableName);
      if (result[0] != null)
         result[0].deleteOnExit();
      result[1] = compilerOutput[0];
      result[2] = compilerOutput[1];
      return result;
   }

   public static CPPApplicationBuilder getInstance() {
      if (instance == null)
         instance = new CPPApplicationBuilder();
      return instance;
   }
}
